// <auto-generated />
using System;
using System.Globalization;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Awarean.BrayaOrtega.RinhaBackend.Q124.Infra
{
    internal partial class TransactionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction",
                typeof(Transaction),
                baseEntityType);

            var accountId = runtimeEntityType.AddProperty(
                "AccountId",
                typeof(int),
                propertyInfo: typeof(Transaction).GetProperty("AccountId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<AccountId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            accountId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "integer"));
            accountId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
            accountId.AddAnnotation("Relational:ColumnName", "accountid");

            var descricao = runtimeEntityType.AddProperty(
                "Descricao",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("Descricao", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Descricao>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            descricao.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varchar(10)",
                    size: 10));
            descricao.TypeMapping = ((NpgsqlStringTypeMapping)descricao.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
        descricao.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        descricao.AddAnnotation("Relational:ColumnName", "descricao");
        descricao.AddAnnotation("Relational:ColumnType", "varchar(10)");

        var limite = runtimeEntityType.AddProperty(
            "Limite",
            typeof(int),
            propertyInfo: typeof(Transaction).GetProperty("Limite", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Transaction).GetField("<Limite>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: 0);
        limite.TypeMapping = IntTypeMapping.Default.Clone(
            comparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            keyComparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            providerValueComparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "integer"));
        limite.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        limite.AddAnnotation("Relational:ColumnName", "limite");

        var realizadaEm = runtimeEntityType.AddProperty(
            "RealizadaEm",
            typeof(DateTime),
            propertyInfo: typeof(Transaction).GetProperty("RealizadaEm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Transaction).GetField("<RealizadaEm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            valueGenerated: ValueGenerated.OnAdd,
            sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
        realizadaEm.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
            comparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            keyComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v),
            providerValueComparer: new ValueComparer<DateTime>(
                (DateTime v1, DateTime v2) => v1.Equals(v2),
                (DateTime v) => v.GetHashCode(),
                (DateTime v) => v));
        realizadaEm.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        realizadaEm.AddAnnotation("Relational:ColumnName", "realizadaem");
        realizadaEm.AddAnnotation("Relational:DefaultValueSql", "now()");

        var saldo = runtimeEntityType.AddProperty(
            "Saldo",
            typeof(int),
            propertyInfo: typeof(Transaction).GetProperty("Saldo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Transaction).GetField("<Saldo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            sentinel: 0);
        saldo.TypeMapping = IntTypeMapping.Default.Clone(
            comparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            keyComparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            providerValueComparer: new ValueComparer<int>(
                (int v1, int v2) => v1 == v2,
                (int v) => v,
                (int v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "integer"));
        saldo.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
        saldo.AddAnnotation("Relational:ColumnName", "saldo");

        var tipo = runtimeEntityType.AddProperty(
            "Tipo",
            typeof(char),
            propertyInfo: typeof(Transaction).GetProperty("Tipo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
            fieldInfo: typeof(Transaction).GetField("<Tipo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
        tipo.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
            comparer: new ValueComparer<char>(
                (char v1, char v2) => v1 == v2,
                (char v) => (int)v,
                (char v) => v),
            keyComparer: new ValueComparer<char>(
                (char v1, char v2) => v1 == v2,
                (char v) => (int)v,
                (char v) => v),
            providerValueComparer: new ValueComparer<string>(
                (string v1, string v2) => v1 == v2,
                (string v) => v.GetHashCode(),
                (string v) => v),
            mappingInfo: new RelationalTypeMappingInfo(
                storeTypeName: "varchar(1)",
                size: 1),
            converter: new ValueConverter<char, string>(
                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                (string v) => v.Length < 1 ? '\0' : v[0]),
            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                JsonStringReaderWriter.Instance,
                new ValueConverter<char, string>(
                    (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => v.Length < 1 ? '\0' : v[0])));
        tipo.TypeMapping = ((NpgsqlStringTypeMapping)tipo.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
    tipo.SetSentinelFromProviderValue("\0");
    tipo.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    tipo.AddAnnotation("Relational:ColumnName", "tipo");
    tipo.AddAnnotation("Relational:ColumnType", "varchar(1)");

    var valor = runtimeEntityType.AddProperty(
        "Valor",
        typeof(int),
        propertyInfo: typeof(Transaction).GetProperty("Valor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        fieldInfo: typeof(Transaction).GetField("<Valor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
        sentinel: 0);
    valor.TypeMapping = IntTypeMapping.Default.Clone(
        comparer: new ValueComparer<int>(
            (int v1, int v2) => v1 == v2,
            (int v) => v,
            (int v) => v),
        keyComparer: new ValueComparer<int>(
            (int v1, int v2) => v1 == v2,
            (int v) => v,
            (int v) => v),
        providerValueComparer: new ValueComparer<int>(
            (int v1, int v2) => v1 == v2,
            (int v) => v,
            (int v) => v),
        mappingInfo: new RelationalTypeMappingInfo(
            storeTypeName: "integer"));
    valor.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
    valor.AddAnnotation("Relational:ColumnName", "valor");

    return runtimeEntityType;
}

public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
{
    runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
    runtimeEntityType.AddAnnotation("Relational:Schema", null);
    runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
    runtimeEntityType.AddAnnotation("Relational:TableName", "transactions");
    runtimeEntityType.AddAnnotation("Relational:ViewName", null);
    runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

    Customize(runtimeEntityType);
}

static partial void Customize(RuntimeEntityType runtimeEntityType);
}
}
