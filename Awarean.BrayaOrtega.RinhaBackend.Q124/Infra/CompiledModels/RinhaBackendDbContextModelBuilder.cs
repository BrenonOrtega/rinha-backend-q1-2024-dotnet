// // <auto-generated />
// using System;
// using System.Collections.Generic;
// using Microsoft.EntityFrameworkCore;
// using Microsoft.EntityFrameworkCore.Infrastructure;
// using Microsoft.EntityFrameworkCore.Metadata;
// using Microsoft.EntityFrameworkCore.Metadata.Internal;
// using Microsoft.EntityFrameworkCore.Migrations;
// using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

// #pragma warning disable 219, 612, 618
// #nullable disable

// namespace Awarean.BrayaOrtega.RinhaBackend.Q124.Infra.CompiledModels
// {
//     public partial class RinhaBackendDbContextModel
//     {
//         partial void Initialize()
//         {
//             var account = AccountEntityType.Create(this);
//             var transaction = TransactionEntityType.Create(this);

//             TransactionEntityType.CreateForeignKey1(transaction, account);

//             AccountEntityType.CreateAnnotations(account);
//             TransactionEntityType.CreateAnnotations(transaction);

//             AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
//             AddAnnotation("ProductVersion", "8.0.2");
//             AddAnnotation("Relational:MaxIdentifierLength", 63);
//             AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
//         }

//         private IRelationalModel CreateRelationalModel()
//         {
//             var relationalModel = new RelationalModel(this);

//             var account = FindEntityType("Awarean.BrayaOrtega.RinhaBackend.Q124.Models.Account")!;

//             var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
//             account.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
//             var awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase = new TableBase("Awarean.BrayaOrtega.RinhaBackend.Q124.Models.Account", null, relationalModel);
//             var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase.Columns.Add("Id", idColumnBase);
//             var limiteColumnBase = new ColumnBase<ColumnMappingBase>("Limite", "bigint", awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase.Columns.Add("Limite", limiteColumnBase);
//             var saldoColumnBase = new ColumnBase<ColumnMappingBase>("Saldo", "bigint", awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase.Columns.Add("Saldo", saldoColumnBase);
//             relationalModel.DefaultTables.Add("Awarean.BrayaOrtega.RinhaBackend.Q124.Models.Account", awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase);
//             var awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase = new TableMappingBase<ColumnMappingBase>(account, awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase, true);
//             awareanBrayaOrtegaRinhaBackendQ124ModelsAccountTableBase.AddTypeMapping(awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase, false);
//             defaultTableMappings.Add(awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, account.FindProperty("Id")!, awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)limiteColumnBase, account.FindProperty("Limite")!, awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)saldoColumnBase, account.FindProperty("Saldo")!, awareanBrayaOrtegaRinhaBackendQ124ModelsAccountMappingBase);

//             var tableMappings = new List<TableMapping>();
//             account.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
//             var accountTable = new Table("Account", null, relationalModel);
//             var idColumn = new Column("Id", "integer", accountTable);
//             accountTable.Columns.Add("Id", idColumn);
//             idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
//             var limiteColumn = new Column("Limite", "bigint", accountTable);
//             accountTable.Columns.Add("Limite", limiteColumn);
//             var saldoColumn = new Column("Saldo", "bigint", accountTable);
//             accountTable.Columns.Add("Saldo", saldoColumn);
//             var pK_Account = new UniqueConstraint("PK_Account", accountTable, new[] { idColumn });
//             accountTable.PrimaryKey = pK_Account;
//             var pK_AccountUc = RelationalModel.GetKey(this,
//                 "Awarean.BrayaOrtega.RinhaBackend.Q124.Models.Account",
//                 new[] { "Id" });
//             pK_Account.MappedKeys.Add(pK_AccountUc);
//             RelationalModel.GetOrCreateUniqueConstraints(pK_AccountUc).Add(pK_Account);
//             accountTable.UniqueConstraints.Add("PK_Account", pK_Account);
//             relationalModel.Tables.Add(("Account", null), accountTable);
//             var accountTableMapping = new TableMapping(account, accountTable, true);
//             accountTable.AddTypeMapping(accountTableMapping, false);
//             tableMappings.Add(accountTableMapping);
//             RelationalModel.CreateColumnMapping(idColumn, account.FindProperty("Id")!, accountTableMapping);
//             RelationalModel.CreateColumnMapping(limiteColumn, account.FindProperty("Limite")!, accountTableMapping);
//             RelationalModel.CreateColumnMapping(saldoColumn, account.FindProperty("Saldo")!, accountTableMapping);

//             var transaction = FindEntityType("Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction")!;

//             var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
//             transaction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
//             var awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase = new TableBase("Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction", null, relationalModel);
//             var accountIdColumnBase = new ColumnBase<ColumnMappingBase>("AccountId", "integer", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("AccountId", accountIdColumnBase);
//             var descricaoColumnBase = new ColumnBase<ColumnMappingBase>("Descricao", "varchar(10)", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("Descricao", descricaoColumnBase);
//             var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("Id", idColumnBase0);
//             var realizadaEmColumnBase = new ColumnBase<ColumnMappingBase>("RealizadaEm", "timestamp with time zone", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("RealizadaEm", realizadaEmColumnBase);
//             var tipoColumnBase = new ColumnBase<ColumnMappingBase>("Tipo", "varchar(1)", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("Tipo", tipoColumnBase);
//             var valorColumnBase = new ColumnBase<ColumnMappingBase>("Valor", "bigint", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.Columns.Add("Valor", valorColumnBase);
//             relationalModel.DefaultTables.Add("Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction", awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase);
//             var awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase = new TableMappingBase<ColumnMappingBase>(transaction, awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase, true);
//             awareanBrayaOrtegaRinhaBackendQ124TransactionTableBase.AddTypeMapping(awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase, false);
//             defaultTableMappings0.Add(awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accountIdColumnBase, transaction.FindProperty("AccountId")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, transaction.FindProperty("Id")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descricaoColumnBase, transaction.FindProperty("Descricao")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)realizadaEmColumnBase, transaction.FindProperty("RealizadaEm")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoColumnBase, transaction.FindProperty("Tipo")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);
//             RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valorColumnBase, transaction.FindProperty("Valor")!, awareanBrayaOrtegaRinhaBackendQ124TransactionMappingBase);

//             var tableMappings0 = new List<TableMapping>();
//             transaction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
//             var transactionTable = new Table("Transaction", null, relationalModel);
//             var accountIdColumn = new Column("AccountId", "integer", transactionTable);
//             transactionTable.Columns.Add("AccountId", accountIdColumn);
//             var idColumn0 = new Column("Id", "integer", transactionTable);
//             transactionTable.Columns.Add("Id", idColumn0);
//             idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
//             var descricaoColumn = new Column("Descricao", "varchar(10)", transactionTable);
//             transactionTable.Columns.Add("Descricao", descricaoColumn);
//             var realizadaEmColumn = new Column("RealizadaEm", "timestamp with time zone", transactionTable);
//             transactionTable.Columns.Add("RealizadaEm", realizadaEmColumn);
//             var tipoColumn = new Column("Tipo", "varchar(1)", transactionTable);
//             transactionTable.Columns.Add("Tipo", tipoColumn);
//             var valorColumn = new Column("Valor", "bigint", transactionTable);
//             transactionTable.Columns.Add("Valor", valorColumn);
//             var pK_Transaction = new UniqueConstraint("PK_Transaction", transactionTable, new[] { accountIdColumn, idColumn0 });
//             transactionTable.PrimaryKey = pK_Transaction;
//             var pK_TransactionUc = RelationalModel.GetKey(this,
//                 "Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction",
//                 new[] { "AccountId", "Id" });
//             pK_Transaction.MappedKeys.Add(pK_TransactionUc);
//             RelationalModel.GetOrCreateUniqueConstraints(pK_TransactionUc).Add(pK_Transaction);
//             transactionTable.UniqueConstraints.Add("PK_Transaction", pK_Transaction);
//             relationalModel.Tables.Add(("Transaction", null), transactionTable);
//             var transactionTableMapping = new TableMapping(transaction, transactionTable, true);
//             transactionTable.AddTypeMapping(transactionTableMapping, false);
//             tableMappings0.Add(transactionTableMapping);
//             RelationalModel.CreateColumnMapping(accountIdColumn, transaction.FindProperty("AccountId")!, transactionTableMapping);
//             RelationalModel.CreateColumnMapping(idColumn0, transaction.FindProperty("Id")!, transactionTableMapping);
//             RelationalModel.CreateColumnMapping(descricaoColumn, transaction.FindProperty("Descricao")!, transactionTableMapping);
//             RelationalModel.CreateColumnMapping(realizadaEmColumn, transaction.FindProperty("RealizadaEm")!, transactionTableMapping);
//             RelationalModel.CreateColumnMapping(tipoColumn, transaction.FindProperty("Tipo")!, transactionTableMapping);
//             RelationalModel.CreateColumnMapping(valorColumn, transaction.FindProperty("Valor")!, transactionTableMapping);
//             var fK_Transaction_Account_AccountId = new ForeignKeyConstraint(
//                 "FK_Transaction_Account_AccountId", transactionTable, accountTable,
//                 new[] { accountIdColumn },
//                 accountTable.FindUniqueConstraint("PK_Account")!, ReferentialAction.Cascade);
//             var fK_Transaction_Account_AccountIdFk = RelationalModel.GetForeignKey(this,
//                 "Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction",
//                 new[] { "AccountId" },
//                 "Awarean.BrayaOrtega.RinhaBackend.Q124.Models.Account",
//                 new[] { "Id" });
//             fK_Transaction_Account_AccountId.MappedForeignKeys.Add(fK_Transaction_Account_AccountIdFk);
//             RelationalModel.GetOrCreateForeignKeyConstraints(fK_Transaction_Account_AccountIdFk).Add(fK_Transaction_Account_AccountId);
//             transactionTable.ForeignKeyConstraints.Add(fK_Transaction_Account_AccountId);
//             accountTable.ReferencingForeignKeyConstraints.Add(fK_Transaction_Account_AccountId);
//             return relationalModel.MakeReadOnly();
//         }
//     }
// }
