// // <auto-generated />
// using System;
// using System.Collections.Generic;
// using System.Reflection;
// using Awarean.BrayaOrtega.RinhaBackend.Q124.Models;
// using Microsoft.EntityFrameworkCore;
// using Microsoft.EntityFrameworkCore.ChangeTracking;
// using Microsoft.EntityFrameworkCore.Metadata;
// using Microsoft.EntityFrameworkCore.Storage;
// using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
// using Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping;

// #pragma warning disable 219, 612, 618
// #nullable disable

// namespace Awarean.BrayaOrtega.RinhaBackend.Q124.Infra.CompiledModels
// {
//     internal partial class TransactionEntityType
//     {
//         public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
//         {
//             var runtimeEntityType = model.AddEntityType(
//                 "Awarean.BrayaOrtega.RinhaBackend.Q124.Transaction",
//                 typeof(Transaction),
//                 baseEntityType);

//             var accountId = runtimeEntityType.AddProperty(
//                 "AccountId",
//                 typeof(int),
//                 propertyInfo: typeof(Transaction).GetProperty("AccountId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//                 fieldInfo: typeof(Transaction).GetField("<AccountId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//                 afterSaveBehavior: PropertySaveBehavior.Throw,
//                 sentinel: 0);
//             accountId.TypeMapping = IntTypeMapping.Default.Clone(
//                 comparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 keyComparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 providerValueComparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 mappingInfo: new RelationalTypeMappingInfo(
//                     storeTypeName: "integer"));
//             accountId.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

//             var id = runtimeEntityType.AddProperty(
//                 "Id",
//                 typeof(int),
//                 valueGenerated: ValueGenerated.OnAdd,
//                 afterSaveBehavior: PropertySaveBehavior.Throw,
//                 sentinel: 0);
//             id.TypeMapping = IntTypeMapping.Default.Clone(
//                 comparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 keyComparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 providerValueComparer: new ValueComparer<int>(
//                     (int v1, int v2) => v1 == v2,
//                     (int v) => v,
//                     (int v) => v),
//                 mappingInfo: new RelationalTypeMappingInfo(
//                     storeTypeName: "integer"));
//             id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

//             var descricao = runtimeEntityType.AddProperty(
//                 "Descricao",
//                 typeof(string),
//                 propertyInfo: typeof(Transaction).GetProperty("Descricao", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//                 fieldInfo: typeof(Transaction).GetField("<Descricao>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
//             descricao.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
//                 comparer: new ValueComparer<string>(
//                     (string v1, string v2) => v1 == v2,
//                     (string v) => v.GetHashCode(),
//                     (string v) => v),
//                 keyComparer: new ValueComparer<string>(
//                     (string v1, string v2) => v1 == v2,
//                     (string v) => v.GetHashCode(),
//                     (string v) => v),
//                 providerValueComparer: new ValueComparer<string>(
//                     (string v1, string v2) => v1 == v2,
//                     (string v) => v.GetHashCode(),
//                     (string v) => v),
//                 mappingInfo: new RelationalTypeMappingInfo(
//                     storeTypeName: "varchar(10)",
//                     size: 10));
//             descricao.TypeMapping = ((NpgsqlStringTypeMapping)descricao.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
//         descricao.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
//         descricao.AddAnnotation("Relational:ColumnType", "varchar(10)");

//         var realizadaEm = runtimeEntityType.AddProperty(
//             "RealizadaEm",
//             typeof(DateTime),
//             propertyInfo: typeof(Transaction).GetProperty("RealizadaEm", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//             fieldInfo: typeof(Transaction).GetField("<RealizadaEm>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//             valueGenerated: ValueGenerated.OnAdd,
//             sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
//         realizadaEm.TypeMapping = NpgsqlTimestampTzTypeMapping.Default.Clone(
//             comparer: new ValueComparer<DateTime>(
//                 (DateTime v1, DateTime v2) => v1.Equals(v2),
//                 (DateTime v) => v.GetHashCode(),
//                 (DateTime v) => v),
//             keyComparer: new ValueComparer<DateTime>(
//                 (DateTime v1, DateTime v2) => v1.Equals(v2),
//                 (DateTime v) => v.GetHashCode(),
//                 (DateTime v) => v),
//             providerValueComparer: new ValueComparer<DateTime>(
//                 (DateTime v1, DateTime v2) => v1.Equals(v2),
//                 (DateTime v) => v.GetHashCode(),
//                 (DateTime v) => v));
//         realizadaEm.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
//         realizadaEm.AddAnnotation("Relational:DefaultValueSql", "now()");

//         var tipo = runtimeEntityType.AddProperty(
//             "Tipo",
//             typeof(string),
//             propertyInfo: typeof(Transaction).GetProperty("Tipo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//             fieldInfo: typeof(Transaction).GetField("<Tipo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
//         tipo.TypeMapping = NpgsqlStringTypeMapping.Default.Clone(
//             comparer: new ValueComparer<string>(
//                 (string v1, string v2) => v1 == v2,
//                 (string v) => v.GetHashCode(),
//                 (string v) => v),
//             keyComparer: new ValueComparer<string>(
//                 (string v1, string v2) => v1 == v2,
//                 (string v) => v.GetHashCode(),
//                 (string v) => v),
//             providerValueComparer: new ValueComparer<string>(
//                 (string v1, string v2) => v1 == v2,
//                 (string v) => v.GetHashCode(),
//                 (string v) => v),
//             mappingInfo: new RelationalTypeMappingInfo(
//                 storeTypeName: "varchar(1)",
//                 size: 1));
//         tipo.TypeMapping = ((NpgsqlStringTypeMapping)tipo.TypeMapping).Clone(npgsqlDbType: NpgsqlTypes.NpgsqlDbType.Varchar);
//     tipo.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);
//     tipo.AddAnnotation("Relational:ColumnType", "varchar(1)");

//     var valor = runtimeEntityType.AddProperty(
//         "Valor",
//         typeof(long),
//         propertyInfo: typeof(Transaction).GetProperty("Valor", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//         fieldInfo: typeof(Transaction).GetField("<Valor>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//         sentinel: 0L);
//     valor.TypeMapping = LongTypeMapping.Default.Clone(
//         comparer: new ValueComparer<long>(
//             (long v1, long v2) => v1 == v2,
//             (long v) => v.GetHashCode(),
//             (long v) => v),
//         keyComparer: new ValueComparer<long>(
//             (long v1, long v2) => v1 == v2,
//             (long v) => v.GetHashCode(),
//             (long v) => v),
//         providerValueComparer: new ValueComparer<long>(
//             (long v1, long v2) => v1 == v2,
//             (long v) => v.GetHashCode(),
//             (long v) => v));
//     valor.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

//     var key = runtimeEntityType.AddKey(
//         new[] { accountId, id });
//     runtimeEntityType.SetPrimaryKey(key);

//     return runtimeEntityType;
// }

// public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
// {
//     var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("AccountId") },
//         principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
//         principalEntityType,
//         deleteBehavior: DeleteBehavior.Cascade,
//         required: true,
//         ownership: true);

//     var transactions = principalEntityType.AddNavigation("Transactions",
//         runtimeForeignKey,
//         onDependent: false,
//         typeof(List<Transaction>),
//         propertyInfo: typeof(Account).GetProperty("Transactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//         fieldInfo: typeof(Account).GetField("<Transactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
//         eagerLoaded: true);

//     return runtimeForeignKey;
// }

// public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
// {
//     runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
//     runtimeEntityType.AddAnnotation("Relational:Schema", null);
//     runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
//     runtimeEntityType.AddAnnotation("Relational:TableName", "Transaction");
//     runtimeEntityType.AddAnnotation("Relational:ViewName", null);
//     runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

//     Customize(runtimeEntityType);
// }

// static partial void Customize(RuntimeEntityType runtimeEntityType);
// }
// }
